var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};

// lib/action/keybinds.ts
var isMac = navigator.userAgent.toLowerCase().indexOf("mac") !== -1;
function bindingSymbols(key) {
  if (!key)
    return [];
  const symbols = {
    "backspace": "\u232B",
    "shift": "\u21E7",
    "meta": "\u2318",
    "tab": "\u21B9",
    "ctrl": "\u2303",
    "uparrow": "\u2191",
    "downarrow": "\u2193",
    "leftarrow": "\u2190",
    "rightarrow": "\u2192",
    "enter": "\u23CE"
  };
  const keys = key.toLowerCase().split("+");
  return keys.map(filterKeyForNonMacMeta).map((k) => Object.keys(symbols).includes(k) ? symbols[k] : k);
}
function filterKeyForNonMacMeta(key) {
  return !isMac && key === "meta" ? "ctrl" : key;
}
var KeyBindings = class {
  constructor() {
    this.bindings = [];
  }
  registerBinding(binding) {
    this.bindings.push(binding);
  }
  getBinding(commandId) {
    for (const b of this.bindings) {
      if (b.command === commandId) {
        return b;
      }
    }
    return null;
  }
  evaluateEvent(event) {
    bindings:
      for (const b of this.bindings) {
        let modifiers = b.key.toLowerCase().split("+");
        let key = modifiers.pop();
        if (key !== event.key.toLowerCase()) {
          continue;
        }
        for (const checkMod of ["shift", "ctrl", "alt", "meta"]) {
          let hasMod = modifiers.includes(checkMod);
          if (!isMac) {
            if (checkMod === "meta")
              continue;
            if (checkMod === "ctrl") {
              hasMod = modifiers.includes("meta") || modifiers.includes("ctrl");
            }
          }
          const modState = event[`${filterKeyForNonMacMeta(checkMod)}Key`];
          if (!modState && hasMod) {
            continue bindings;
          }
          if (modState && !hasMod) {
            continue bindings;
          }
        }
        return b;
      }
    return null;
  }
};

// lib/action/commands.ts
var CommandRegistry = class {
  constructor() {
    this.commands = {};
  }
  registerCommand(cmd) {
    this.commands[cmd.id] = cmd;
  }
  executeCommand(id, ...rest) {
    return new Promise((resolve) => {
      const ret = this.commands[id].action(...rest);
      resolve(ret);
    });
  }
};

// lib/manifold/components.ts
var registry = {};
function component(target) {
  const stack = new Error().stack;
  if (stack) {
    const line = stack.split("\n")[3];
    const name = line.split("/").pop()?.split(".")[0];
    target.__module = name;
  }
  registry[componentName(target)] = target;
}
function componentName(target) {
  if (target.constructor && target.constructor.__module) {
    target = target.constructor;
  }
  if (target.__module) {
    return `${target.__module}.${target.name}`;
  }
  return target.name;
}

// lib/manifold/mod.ts
var Node = class {
  constructor(module, id) {
    this.module = module;
    this.ID = id;
  }
  changed() {
    this.module.changed(this);
  }
  get isDestroyed() {
    return !this.module.nodes.hasOwnProperty(this.ID);
  }
  get raw() {
    return this.module.nodes[this.ID];
  }
  getName() {
    return this.raw.Name;
  }
  setName(val) {
    this.raw.Name = val;
    this.changed();
  }
  getValue() {
    return this.raw.Value;
  }
  getParent() {
    if (!this.raw.Parent)
      return null;
    return new Node(this.module, this.raw.Parent);
  }
  setParent(n) {
    const p = this.getParent();
    if (p !== null) {
      p.raw.Linked.Children.splice(this.getSiblingIndex(), 1);
    }
    this.raw.Parent = n.ID;
    n.raw.Linked.Children.push(this.ID);
    this.changed();
  }
  getChildren() {
    if (!this.raw.Linked.Children)
      return [];
    return this.raw.Linked.Children.map((id) => new Node(this.module, id));
  }
  childCount() {
    if (!this.raw.Linked.Children)
      return 0;
    return this.raw.Linked.Children.length;
  }
  getAttr(name) {
    return this.raw.Attrs[name] || "";
  }
  setAttr(name, value) {
    this.raw.Attrs[name] = value;
    this.changed();
  }
  getSiblingIndex() {
    const p = this.getParent();
    if (p === null)
      return 0;
    return p.raw.Linked.Children.findIndex((id) => id === this.ID);
  }
  setSiblingIndex(i) {
    const p = this.getParent();
    if (p === null)
      return;
    p.raw.Linked.Children.splice(this.getSiblingIndex(), 1);
    p.raw.Linked.Children.splice(i, 0, this.ID);
    p.changed();
  }
  getPrevSibling() {
    const p = this.getParent();
    if (p === null)
      return null;
    if (this.getSiblingIndex() === 0)
      return null;
    return p.getChildren()[this.getSiblingIndex() - 1];
  }
  getNextSibling() {
    const p = this.getParent();
    if (p === null)
      return null;
    if (this.getSiblingIndex() === p.getChildren().length - 1)
      return null;
    return p.getChildren()[this.getSiblingIndex() + 1];
  }
  destroy() {
    this.module.destroy(this);
  }
  addComponent(obj) {
    const node = this.module.new(componentName(obj), obj);
    node.raw.Parent = this.ID;
    this.raw.Linked.Components.push(node.ID);
    this.changed();
  }
  removeComponent(type) {
    const coms = this.getComponentNodes().filter((n) => n.getName() === componentName(type));
    if (coms.length > 0) {
      coms[0].destroy();
    }
    this.changed();
  }
  hasComponent(type) {
    const coms = this.getComponentNodes().filter((n) => n.getName() === componentName(type));
    if (coms.length > 0) {
      return true;
    }
    return false;
  }
  getComponent(type) {
    const coms = this.getComponentNodes().filter((n) => n.getName() === componentName(type));
    if (coms.length > 0) {
      return coms[0].getValue();
    }
    return null;
  }
  getComponentNodes() {
    if (!this.raw.Linked.Components)
      return [];
    return this.raw.Linked.Components.map((id) => new Node(this.module, id));
  }
  getPath() {
    let cur = this;
    const path = [];
    while (cur) {
      path.unshift(cur.getName());
      cur = cur.getParent();
    }
    return path.join("/");
  }
  find(path) {
    return this.module.find([this.getPath(), path].join("/"));
  }
  // getComponentsInChildren
  // getComponentsInParents
  // getAncestors
  // getPath
  // walk
  // duplicate?
};
var Module = class {
  constructor() {
    this.nodes = { "@root": {
      ID: "@root",
      Name: "@root",
      Linked: { Children: [], Components: [] },
      Attrs: {}
    } };
    this.observers = [];
  }
  import(nodes) {
    for (const n of nodes) {
      this.nodes[n.ID] = n;
    }
  }
  export() {
    const nodes = [];
    for (const n of Object.values(this.nodes)) {
      nodes.push(n);
    }
    return nodes;
  }
  new(name, value) {
    let parent = null;
    if (name.includes("/") && !name.startsWith("@")) {
      const parts = name.split("/");
      parent = this.getRoot();
      for (let i = 0; i < parts.length - 1; i++) {
        if (parent === null) {
          throw "unable to get root";
        }
        let child = parent.find(parts[i]);
        if (!child) {
          child = this.new(parts.slice(0, i + 1).join("/"));
        }
        parent = child;
      }
      name = parts[parts.length - 1];
    }
    const id = name.startsWith("@") ? name : uniqueId();
    this.nodes[id] = {
      ID: id,
      Name: name,
      Value: value,
      Linked: { Children: [], Components: [] },
      Attrs: {}
    };
    const node = new Node(this, id);
    if (parent) {
      node.setParent(parent);
    }
    return node;
  }
  destroy(n) {
    const p = n.getParent();
    if (p !== null) {
      if (p.raw.Linked.Children.includes(n.ID)) {
        p.raw.Linked.Children.splice(n.getSiblingIndex(), 1);
      }
      if (p.raw.Linked.Components.includes(n.ID)) {
        p.raw.Linked.Components.splice(n.getSiblingIndex(), 1);
      }
    }
    delete this.nodes[n.ID];
    if (p) {
      this.changed(p);
    }
  }
  roots() {
    return Object.values(this.nodes).filter((n) => n.Parent === void 0).map((n) => new Node(this, n.ID));
  }
  changed(n) {
    this.observers.forEach((cb) => cb(n));
  }
  getRoot(name) {
    name = name || "@root";
    const node = this.roots().find((root) => root.getName() === name);
    if (node === void 0)
      return null;
    return node;
  }
  find(path) {
    const byId = this.nodes[path];
    if (byId)
      return new Node(this, byId.ID);
    const parts = path.split("/");
    let anchorName = "@root";
    if (parts[0].startsWith("@")) {
      anchorName = parts.shift() || "";
      if (parts.length === 0) {
        return this.getRoot(anchorName);
      }
    }
    const findChild = (n, name) => {
      return n.getChildren().find((child) => child.getName() === name);
    };
    let cur = this.getRoot(anchorName);
    if (!cur) {
      return null;
    }
    for (const name of parts) {
      const child = findChild(cur, name);
      if (!child)
        return null;
      cur = child;
    }
    return cur;
  }
  walk(cb) {
    const walkChildren = (n, cb2) => {
      if (cb2(n))
        return true;
      for (const child of n.getChildren()) {
        if (walkChildren(child, cb2))
          return true;
      }
      return false;
    };
    for (const root of this.roots()) {
      if (walkChildren(root, cb))
        return;
    }
  }
};
var uniqueId = () => {
  const dateString = Date.now().toString(36);
  const randomness = Math.random().toString(36).substring(2);
  return dateString + randomness;
};

// lib/action/menus.ts
var MenuRegistry = class {
  constructor() {
    this.menus = {};
  }
  registerMenu(id, items) {
    this.menus[id] = items;
  }
};

// lib/workspace.ts
var Panel = class {
  constructor(node) {
    node.panel = this;
    this.id = Math.random().toString(36).substring(2);
    this.history = [node];
  }
  get current() {
    return this.history[this.history.length - 1];
  }
};
function panelNode(node, panel) {
  node.panel = panel;
  return node;
}
var Workspace = class {
  // [rootid][id]
  constructor(backend) {
    this.commands = new CommandRegistry();
    this.keybindings = new KeyBindings();
    this.menus = new MenuRegistry();
    this.backend = backend;
    this.nodes = new Module();
    this.context = { node: null };
    this.panels = [[]];
    const expanded = localStorage.getItem(this.expandedStorageKey);
    if (expanded) {
      this.expanded = JSON.parse(expanded);
    } else {
      this.expanded = {};
    }
  }
  async initialize() {
    const nodes = await this.backend.nodes.loadAll();
    const root = this.nodes.find("@root");
    if (nodes.length === 0) {
      const ws = this.nodes.new("Workspace");
      ws.setParent(root);
      const cal = this.nodes.new("Calendar");
      cal.setParent(ws);
      const home = this.nodes.new("Home");
      home.setParent(ws);
    }
    this.nodes.import(nodes);
    this.nodes.observers.push((n) => {
      this.backend.nodes.saveAll(Object.values(this.nodes.nodes));
      this.backend.index.index(n.raw);
      n.getComponentNodes().forEach((com) => this.backend.index.index(com.raw));
    });
    Object.values(this.nodes.nodes).forEach((n) => this.backend.index.index(n));
    this.openNewPanel(this.nodes.find("@root/Workspace"));
    m.redraw();
    if (!localStorage.getItem("firsttime")) {
      this.showNotice("firsttime");
    }
  }
  authenticated() {
    return this.backend.auth && this.backend.auth.currentUser();
  }
  closeQuickAdd() {
    this.quickadd = null;
    m.redraw();
  }
  openQuickAdd() {
    let node = this.nodes.find("@quickadd");
    if (!node) {
      node = this.nodes.new("@quickadd");
    }
    this.quickadd = node;
  }
  commitQuickAdd() {
    const node = this.nodes.find("@quickadd");
    if (!node)
      return;
    const today = this.todayNode();
    node.getChildren().forEach((n) => n.setParent(today));
  }
  clearQuickAdd() {
    const node = this.nodes.find("@quickadd");
    if (!node)
      return;
    node.getChildren().forEach((n) => n.destroy());
  }
  todayNode() {
    const today = new Date();
    const dayNode = today.toUTCString().split(today.getFullYear())[0];
    const weekNode = `Week ${String(getWeekOfYear(today)).padStart(2, "0")}`;
    const yearNode = `${today.getFullYear()}`;
    const todayPath = ["Workspace", "Calendar", yearNode, weekNode, dayNode].join("/");
    let todayNode = this.nodes.find(todayPath);
    if (!todayNode) {
      todayNode = this.nodes.new(todayPath);
    }
    return todayNode;
  }
  openToday() {
    this.open(this.todayNode());
  }
  open(n) {
    if (!this.expanded[n.ID]) {
      this.expanded[n.ID] = {};
    }
    localStorage.setItem("lastopen", n.ID);
    this.panels[0][0] = new Panel(n);
  }
  openNewPanel(n) {
    if (!this.expanded[n.ID]) {
      this.expanded[n.ID] = {};
    }
    localStorage.setItem("lastopen", n.ID);
    const p = new Panel(n);
    this.panels[0].push(p);
  }
  closePanel(panel) {
    this.panels.forEach((row, ridx) => {
      this.panels[ridx] = row.filter((p) => p !== panel);
    });
  }
  focus(n, pos = 0) {
    this.context.node = n;
    if (n) {
      document.getElementById(`input-${n.panel?.id}-${n.ID}`)?.focus();
      document.getElementById(`input-${n.panel?.id}-${n.ID}`)?.setSelectionRange(pos, pos);
    }
  }
  getInput(n) {
    return document.getElementById(`input-${n.panel?.id}-${n.ID}`);
  }
  executeCommand(id, ctx, ...rest) {
    return this.commands.executeCommand(id, this.newContext(ctx), ...rest);
  }
  newContext(ctx) {
    return Object.assign({}, this.context, ctx);
  }
  showMenu(event, ctx) {
    event.stopPropagation();
    event.preventDefault();
    const trigger = event.target.closest("*[data-menu]");
    const rect = trigger.getBoundingClientRect();
    const align = trigger.dataset["align"] || "left";
    let x = document.body.scrollLeft + rect.x;
    if (align === "right") {
      x = window.innerWidth - rect.right - rect.width;
    }
    const y = document.body.scrollTop + rect.y + rect.height;
    const items = this.menus.menus[trigger.dataset["menu"]];
    const cmds = items.filter((i) => i.command).map((i) => this.commands.commands[i.command]);
    if (!items)
      return;
    this.menu = {
      x,
      y,
      ctx: this.newContext(ctx),
      items,
      commands: cmds,
      align
    };
    m.redraw();
  }
  hideMenu() {
    this.menu = null;
    m.redraw();
  }
  showPalette(x, y, ctx) {
    this.palette = { x, y, ctx };
    m.redraw();
  }
  hidePalette() {
    this.palette = null;
    m.redraw();
  }
  showNotice(message, finished) {
    this.notice = { message, finished };
    m.redraw();
  }
  hideNotice() {
    this.notice = null;
    m.redraw();
  }
  getExpanded(n) {
    let root = n.ID;
    if (n.panel) {
      root = n.panel.history[0].ID;
    }
    if (!this.expanded[root]) {
      this.expanded[root] = {};
    }
    let expanded = this.expanded[root][n.ID];
    if (expanded === void 0) {
      expanded = false;
    }
    return expanded;
  }
  setExpanded(n, b) {
    this.expanded[n.panel.history[0].ID][n.ID] = b;
    localStorage.setItem(this.expandedStorageKey, JSON.stringify(this.expanded));
  }
  get expandedStorageKey() {
    if (this.authenticated()) {
      return `treehouse-expanded-${this.backend.auth.currentUser().userID()}`;
    } else {
      return `treehouse-expanded`;
    }
  }
  findAbove(n) {
    if (n.ID === n.panel.current.ID) {
      return null;
    }
    const panel = n.panel;
    let above = n.getPrevSibling();
    if (!above) {
      return panelNode(n.getParent(), panel);
    }
    const lastChildIfExpanded = (n2) => {
      const expanded = this.getExpanded(panelNode(n2, panel));
      if (!expanded || n2.childCount() === 0) {
        return n2;
      }
      const lastChild = n2.getChildren()[n2.childCount() - 1];
      return lastChildIfExpanded(lastChild);
    };
    return panelNode(lastChildIfExpanded(above), panel);
  }
  findBelow(n) {
    const panel = n.panel;
    if (this.getExpanded(n) && n.childCount() > 0) {
      return panelNode(n.getChildren()[0], panel);
    }
    const nextSiblingOrParentNextSibling = (n2) => {
      const below = n2.getNextSibling();
      if (below) {
        return panelNode(below, panel);
      }
      const parent = n2.getParent();
      if (!parent || parent.ID === panel.current.ID) {
        return null;
      }
      return nextSiblingOrParentNextSibling(parent);
    };
    return nextSiblingOrParentNextSibling(n);
  }
};
function getWeekOfYear(date) {
  var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
  var dayNum = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - dayNum);
  var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  return Math.ceil(((d - yearStart) / 864e5 + 1) / 7);
}

// lib/ui/menu.tsx
var Menu = {
  view({ attrs: { workspace, x, y, items, align, commands, ctx } }) {
    const onclick = (item, cmd) => (e) => {
      e.stopPropagation();
      if (item.disabled) {
        return;
      }
      if (item.onclick) {
        item.onclick();
      }
      if (cmd) {
        workspace.executeCommand(cmd.id, ctx);
      }
      workspace.hideMenu();
    };
    let posStyle = { left: `${x}px` };
    if (align === "right") {
      posStyle = { right: `${x}px` };
    }
    return /* @__PURE__ */ m("ul", { class: "menu", style: Object.assign(posStyle, {
      margin: "0",
      position: "absolute",
      top: `${y}px`,
      border: "1px solid var(--dark)",
      borderRadius: "0.25rem",
      padding: "0.25rem 0 0.25rem 0",
      display: "inline-block",
      background: "white",
      filter: "drop-shadow(2px 2px 4px #5555)",
      fontSize: "14px",
      minWidth: "200px"
    }) }, items.filter((i) => !i.when || i.when()).map((i) => {
      let title = "";
      let binding = void 0;
      let cmd = void 0;
      if (i.command) {
        cmd = commands.find((c) => c.id === i.command);
        binding = workspace.keybindings.getBinding(cmd.id);
        title = cmd.title;
      }
      if (i.title) {
        title = i.title();
      }
      return /* @__PURE__ */ m("li", { onclick: onclick(i, cmd), class: i.disabled ? "disabled" : "", style: {
        margin: "0px",
        listStyleType: "none",
        padding: "0.25rem 0.5rem 0.25rem 0.5rem",
        display: "flex"
      } }, /* @__PURE__ */ m("div", null, title), binding && /* @__PURE__ */ m("div", { style: {
        flexGrow: "1",
        textAlign: "right",
        color: "#888",
        marginLeft: "1rem"
      } }, bindingSymbols(binding.key).join(" ").toUpperCase()));
    }));
  }
};

// lib/ui/palette.tsx
var CommandPalette = {
  onupdate({ state, dom }) {
    const children = dom.querySelector(".commands").children;
    if (state.selected !== void 0 && children.length > 0) {
      children[state.selected].scrollIntoView({ block: "nearest" });
    }
  },
  oncreate({ dom }) {
    dom.querySelector("input").focus();
  },
  view({ attrs, state }) {
    const workspace = attrs.workspace;
    state.filter = state.filter === void 0 ? "" : state.filter;
    const cmds = Object.values(workspace.commands.commands);
    const filtered = cmds.filter((cmd) => cmd.id.startsWith(state.filter));
    const onkeydown = (e) => {
      const mod = (a, b) => (a % b + b) % b;
      if (e.key === "ArrowDown") {
        if (state.selected === void 0) {
          state.selected = 0;
          return;
        }
        state.selected = mod(state.selected + 1, filtered.length);
        return false;
      }
      if (e.key === "ArrowUp") {
        if (state.selected === void 0) {
          state.selected = 0;
        }
        state.selected = mod(state.selected - 1, filtered.length);
        return false;
      }
      if (e.key === "Enter") {
        if (state.selected !== void 0) {
          workspace.commands.executeCommand(filtered[state.selected].id, attrs.ctx);
          workspace.hidePalette();
        }
        return false;
      }
      if (e.key === "Escape") {
        workspace.hidePalette();
      }
    };
    const autocomplete = (e) => {
      state.filter = e.target.value;
      state.selected = 0;
    };
    return /* @__PURE__ */ m("div", { class: "palette", style: {
      margin: "0",
      position: "absolute",
      left: `${attrs.x}px`,
      top: `${attrs.y}px`,
      border: "1px solid var(--dark)",
      borderRadius: "0.25rem",
      padding: "0.5rem",
      background: "white",
      fontSize: "14px",
      minWidth: "400px"
    } }, /* @__PURE__ */ m("div", null, /* @__PURE__ */ m("input", { style: { width: "98%", outline: "0", border: "0" }, type: "text", onkeydown, oninput: autocomplete, placeholder: "Enter command..." })), /* @__PURE__ */ m("div", { class: "commands", style: {
      margin: "0.25rem",
      overflowY: "scroll",
      maxHeight: "200px",
      position: "relative"
    } }, filtered.map((cmd, idx) => /* @__PURE__ */ m("div", { style: { padding: "0.25rem" }, class: state.selected === idx ? "selected" : "" }, cmd.title || cmd.id))));
  }
};

// lib/ui/outline.tsx
var OutlineNode = {
  view({ attrs, state, children }) {
    const { node, workspace } = attrs;
    const expanded = workspace.getExpanded(node);
    const hover = (e) => {
      state.hover = true;
      e.stopPropagation();
    };
    const unhover = (e) => {
      state.hover = false;
      e.stopPropagation();
    };
    const toggle = (e) => {
      if (expanded) {
        workspace.executeCommand("collapse", { node });
      } else {
        workspace.executeCommand("expand", { node });
      }
      e.stopPropagation();
    };
    const checkCommands = (e) => {
      switch (e.key) {
        case "ArrowUp":
          if (e.target.selectionStart !== 0) {
            e.stopPropagation();
          }
          break;
        case "ArrowDown":
          if (e.target.selectionStart !== e.target.value.length && e.target.selectionStart !== 0) {
            e.stopPropagation();
          }
          break;
        case "Backspace":
          if (e.target.value === "") {
            e.preventDefault();
            e.stopPropagation();
            workspace.executeCommand("delete", { node, event: e });
            return;
          }
          if (e.target.value !== "" && e.target.selectionStart === 0 && e.target.selectionEnd === 0) {
            e.preventDefault();
            e.stopPropagation();
            const prev = workspace.findAbove(node);
            if (!prev) {
              return;
            }
            const oldName = prev.getName();
            prev.setName(oldName + e.target.value);
            node.destroy();
            m.redraw.sync();
            workspace.focus(panelNode(prev, node.panel), oldName.length);
            return;
          }
          break;
        case "Enter":
          e.preventDefault();
          if (e.ctrlKey || e.shiftKey || e.metaKey || e.altKey)
            return;
          if (e.target.selectionStart === e.target.value.length) {
            workspace.executeCommand("insert", { node });
            e.stopPropagation();
            return;
          }
          if (e.target.selectionStart === 0) {
            workspace.executeCommand("insert-before", { node });
            e.stopPropagation();
            return;
          }
          if (e.target.selectionStart > 0 && e.target.selectionStart < e.target.value.length) {
            workspace.executeCommand("insert", { node }, e.target.value.slice(e.target.selectionStart)).then(() => {
              node.setName(e.target.value.slice(0, e.target.selectionStart));
            });
            e.stopPropagation();
            return;
          }
          break;
      }
    };
    const toggleCheckbox = (e) => {
      const checkbox = node.getComponent(Checkbox);
      checkbox.checked = !checkbox.checked;
      node.changed();
    };
    const zoom = (e) => {
      e.preventDefault();
      e.stopPropagation();
      workspace.executeCommand("zoom", { node });
      if (document.selection && document.selection.empty) {
        document.selection.empty();
      } else if (window.getSelection) {
        window.getSelection().removeAllRanges();
      }
    };
    return /* @__PURE__ */ m("div", { style: { paddingLeft: "1rem" }, onmouseover: hover, onmouseout: unhover }, /* @__PURE__ */ m("div", { style: {
      display: "flex",
      flexDirection: "row",
      alignItems: "start",
      marginTop: "0.125rem",
      marginBottom: "0.125rem"
    } }, /* @__PURE__ */ m(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        style: {
          cursor: "pointer",
          flexShrink: "0",
          width: "1rem",
          height: "1rem",
          position: "absolute",
          marginLeft: "-1rem",
          userSelect: "none",
          marginTop: "0.25rem",
          display: state.hover ? "block" : "none"
        },
        onclick: (e) => workspace.showMenu(e, { node }),
        oncontextmenu: (e) => workspace.showMenu(e, { node }),
        "data-menu": "node",
        fill: "lightgray",
        viewBox: "0 0 16 16"
      },
      /* @__PURE__ */ m("path", { style: { transform: "translateY(-1px)" }, "fill-rule": "evenodd", d: "M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" })
    ), /* @__PURE__ */ m("svg", { onclick: toggle, ondblclick: zoom, oncontextmenu: (e) => workspace.showMenu(e, { node }), "data-menu": "node", style: {
      cursor: "pointer",
      flexShrink: "0",
      width: "1rem",
      height: "1rem",
      marginRight: "0.5rem",
      paddingLeft: "1px",
      marginTop: "0.25rem"
    }, xmlns: "http://www.w3.org/2000/svg", fill: "gray", viewBox: "0 0 16 16" }, node.childCount() > 0 && !expanded ? /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "7", fill: "lightgray" }) : null, /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "3" })), /* @__PURE__ */ m("div", { style: { flexGrow: "1", display: "flex", alignItems: "start" } }, node.hasComponent(Checkbox) ? /* @__PURE__ */ m("input", { type: "checkbox", style: { marginTop: "0.3rem", marginRight: "0.5rem" }, onclick: toggleCheckbox, checked: node.getComponent(Checkbox).checked }) : null, /* @__PURE__ */ m(NodeEditor, { workspace, node, onkeydown: checkCommands }))), expanded === true && /* @__PURE__ */ m("div", { style: {
      display: "flex",
      flexDirection: "row",
      paddingBottom: "0.25rem"
    } }, /* @__PURE__ */ m("div", { style: { width: "1rem", marginRight: "0.25rem", display: "flex" }, onclick: toggle }, /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid gray", height: "100%", marginLeft: "0.5rem" } })), /* @__PURE__ */ m("div", { style: { flexGrow: "1" } }, node.childCount() > 0 ? node.getChildren().map((n) => /* @__PURE__ */ m(OutlineNode, { key: n.ID, workspace, node: panelNode(n, node.panel) })) : /* @__PURE__ */ m(NewNode, { workspace, node }))));
  }
};
var NewNode = {
  view({ attrs: { workspace, node } }) {
    const startNew = (e) => {
      workspace.executeCommand("insert-child", { node }, e.target.value);
    };
    const tabNew = (e) => {
      if (e.key === "Tab") {
        e.stopPropagation();
        e.preventDefault();
        if (node.childCount() > 0) {
          const lastchild = node.getChildren()[node.childCount() - 1];
          workspace.executeCommand("insert-child", { node: panelNode(lastchild, node.panel) });
        }
      }
    };
    return /* @__PURE__ */ m("div", { style: {
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      paddingLeft: "1rem",
      marginTop: "0.125rem",
      marginBottom: "0.125rem"
    } }, /* @__PURE__ */ m("svg", { style: { flexShrink: "0", width: "1rem", height: "1rem", marginRight: "0.5rem", paddingLeft: "1px" }, xmlns: "http://www.w3.org/2000/svg", fill: "gray", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "7", fill: "lightgray" }), /* @__PURE__ */ m("path", { fill: "#555", style: { transform: "translate(0px, -1px)" }, d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" })), /* @__PURE__ */ m("div", { style: { flexGrow: "1", display: "flex" } }, /* @__PURE__ */ m(
      "input",
      {
        type: "text",
        oninput: startNew,
        onkeydown: tabNew,
        value: "",
        style: {
          border: "0px",
          flexGrow: "1",
          outline: "0px"
        }
      }
    )));
  }
};
var OutlineEditor = {
  view({ attrs: { workspace, node }, state }) {
    return /* @__PURE__ */ m("div", { style: { padding: "var(--padding)" } }, node.getChildren().map((n) => /* @__PURE__ */ m(OutlineNode, { key: n.ID, workspace, node: panelNode(n, node.panel) })), /* @__PURE__ */ m(NewNode, { workspace, node }));
  }
};
var NodeEditor = {
  oncreate({ dom }) {
    const textarea = dom.querySelector("textarea");
    const initialHeight = textarea.offsetHeight;
    const span = dom.querySelector("span");
    this.updateHeight = () => {
      span.style.width = `${Math.max(textarea.offsetWidth, 100)}px`;
      span.innerHTML = textarea.value.replace("\n", "<br/>");
      textarea.style.height = span.offsetHeight > 0 ? `${span.offsetHeight}px` : `${initialHeight}px`;
    };
    textarea.addEventListener("input", () => this.updateHeight());
    textarea.addEventListener("blur", () => span.innerHTML = "");
    setTimeout(() => this.updateHeight(), 50);
  },
  onupdate() {
    this.updateHeight();
  },
  view({ attrs: { workspace, node, onkeydown, disallowEmpty }, state }) {
    const value = state.editing ? state.buffer : node.getName();
    const defaultKeydown = (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        e.stopPropagation();
      }
    };
    const startEdit = (e) => {
      state.initialValue = node.getName();
      workspace.context.node = node;
      state.editing = true;
      state.buffer = node.getName();
    };
    const finishEdit = (e) => {
      if (state.editing) {
        state.editing = false;
        if (!node.isDestroyed) {
          if (disallowEmpty && state.buffer.length === 0) {
            node.setName(state.initialValue);
          } else {
            node.setName(state.buffer);
          }
        }
        state.buffer = void 0;
        workspace.context.node = null;
      }
    };
    const edit = (e) => {
      state.buffer = e.target.value;
      if (disallowEmpty && state.buffer.length === 0) {
        node.setName(state.initialValue);
      } else {
        node.setName(state.buffer);
      }
    };
    const style = {
      outline: "none",
      fontSize: "inherit",
      fontFamily: "inherit",
      padding: "0",
      width: "100%",
      boxSizing: "border-box",
      resize: "none",
      overflow: "hidden",
      display: "block",
      lineHeight: "1.45",
      border: "none"
    };
    return /* @__PURE__ */ m("div", { style: { width: "100%", marginBottom: "0.5rem" } }, /* @__PURE__ */ m(
      "textarea",
      {
        style,
        id: `input-${node.panel?.id}-${node.ID}`,
        rows: "1",
        onfocus: startEdit,
        onblur: finishEdit,
        oninput: edit,
        onkeydown: onkeydown || defaultKeydown,
        value
      },
      value
    ), /* @__PURE__ */ m("span", { style: Object.assign({ visibility: "hidden", position: "fixed" }, style) }));
  }
};

// lib/ui/panel.tsx
var Panel2 = {
  view({ attrs }) {
    const panel = attrs.panel;
    const workspace = attrs.workspace;
    const node = panel.history[panel.history.length - 1];
    const close = (e) => {
      workspace.executeCommand("close-panel", {}, panel);
    };
    const goBack = (e) => {
      panel.history.pop();
    };
    const maximize = (e) => {
      workspace.panels = [[panel]];
    };
    const toBottom = (e) => {
      workspace.closePanel(panel);
      workspace.panels.push([panel]);
    };
    const toTop = (e) => {
      workspace.closePanel(panel);
      workspace.panels.unshift([panel]);
    };
    const editMarkdown = (e) => {
      node.getComponent(Page).markdown = e.target.value;
      node.changed();
    };
    function calcHeight(value = "") {
      let numberOfLineBreaks = (value.match(/\n/g) || []).length;
      let newHeight = 20 + numberOfLineBreaks * 20;
      return newHeight;
    }
    return /* @__PURE__ */ m("div", { style: { display: "flex", flexDirection: "column", flexGrow: "1", margin: "var(--padding)", paddingBottom: "var(--padding)", height: "92vh" } }, /* @__PURE__ */ m("div", { style: { display: "flex", background: "white", borderRadius: "0.5rem", color: "gray", padding: "var(--padding)", paddingTop: "0.5rem", paddingBottom: "0.5rem", gap: "var(--padding)", marginBottom: "0.5rem" } }, panel.history.length > 1 ? /* @__PURE__ */ m("div", { style: { rightPadding: "var(--padding)" } }, /* @__PURE__ */ m("svg", { onclick: goBack, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { "fill-rule": "evenodd", d: "M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" }))) : null, /* @__PURE__ */ m("div", { style: { flexGrow: "1" } }, node.getParent() && node.getParent().ID !== "@root" ? /* @__PURE__ */ m("span", { style: { cursor: "pointer" }, onclick: () => workspace.open(node.getParent()) }, node.getParent().getName()) : null), workspace.panels.flat().length > 1 ? /* @__PURE__ */ m("div", { style: { display: "flex", gap: "0.5rem", zIndex: "0" } }, /* @__PURE__ */ m("svg", { onclick: toBottom, style: { cursor: "pointer", transform: "scaleY(-1)" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M2.375 1A2.366 2.366 0 0 0 0 3.357v9.286A2.366 2.366 0 0 0 2.375 15h11.25A2.366 2.366 0 0 0 16 12.643V3.357A2.366 2.366 0 0 0 13.625 1H2.375ZM1 3.357C1 2.612 1.611 2 2.375 2h11.25C14.389 2 15 2.612 15 3.357V4H1v-.643ZM1 5h14v7.643c0 .745-.611 1.357-1.375 1.357H2.375A1.366 1.366 0 0 1 1 12.643V5Z" })), /* @__PURE__ */ m("svg", { onclick: toTop, style: { cursor: "pointer" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M2.375 1A2.366 2.366 0 0 0 0 3.357v9.286A2.366 2.366 0 0 0 2.375 15h11.25A2.366 2.366 0 0 0 16 12.643V3.357A2.366 2.366 0 0 0 13.625 1H2.375ZM1 3.357C1 2.612 1.611 2 2.375 2h11.25C14.389 2 15 2.612 15 3.357V4H1v-.643ZM1 5h14v7.643c0 .745-.611 1.357-1.375 1.357H2.375A1.366 1.366 0 0 1 1 12.643V5Z" })), /* @__PURE__ */ m("svg", { onclick: maximize, style: { cursor: "pointer", transform: "scale(0.9)" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M1.5 1a.5.5 0 0 0-.5.5v4a.5.5 0 0 1-1 0v-4A1.5 1.5 0 0 1 1.5 0h4a.5.5 0 0 1 0 1h-4zM10 .5a.5.5 0 0 1 .5-.5h4A1.5 1.5 0 0 1 16 1.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 1-.5-.5zM.5 10a.5.5 0 0 1 .5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 0 14.5v-4a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v4a1.5 1.5 0 0 1-1.5 1.5h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 1 .5-.5z" })), /* @__PURE__ */ m("svg", { onclick: close, style: { cursor: "pointer" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z" }))) : null), /* @__PURE__ */ m("div", { style: { background: "white", borderRadius: "0.5rem", display: "flex", flexDirection: "column" } }, /* @__PURE__ */ m("div", { oncontextmenu: (e) => workspace.showMenu(e, { node }), "data-menu": "node", style: { padding: "var(--padding)", fontSize: "2rem" } }, /* @__PURE__ */ m(NodeEditor, { workspace, node, disallowEmpty: true })), node.hasComponent(Page) ? /* @__PURE__ */ m(
      "textarea",
      {
        oninput: editMarkdown,
        value: node.getComponent(Page).markdown,
        placeholder: "Enter Markdown text here",
        style: {
          marginLeft: "var(--padding)",
          padding: "var(--padding)",
          outline: "0",
          height: `${calcHeight(node.getComponent(Page).markdown)}px`,
          border: "0"
        }
      },
      node.getComponent(Page).markdown
    ) : null, /* @__PURE__ */ m(OutlineEditor, { workspace, node })));
  }
};

// lib/ui/quickadd.tsx
var QuickAdd = {
  view({ attrs: { workspace } }) {
    return /* @__PURE__ */ m("div", { style: {
      position: "absolute",
      left: "0",
      right: "0",
      top: "0",
      bottom: "0"
    } }, /* @__PURE__ */ m("div", { onclick: () => workspace.closeQuickAdd(), style: {
      position: "absolute",
      background: "black",
      opacity: "50%",
      width: "100%",
      height: "100%"
    } }), /* @__PURE__ */ m("div", { style: {
      position: "relative",
      marginLeft: "auto",
      marginRight: "auto",
      width: "45vw",
      borderRadius: "0.5rem",
      filter: "drop-shadow(2px 2px 4px #5555)",
      marginTop: "20vh",
      padding: "2rem",
      background: "white"
    } }, /* @__PURE__ */ m("h3", { style: { margin: "0" } }, "Quick Add"), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m(OutlineEditor, { workspace, node: workspace.quickadd }), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m("div", { style: { textAlign: "right" } }, /* @__PURE__ */ m("button", { style: { padding: "0.5rem", margin: "0.25rem" }, onclick: () => {
      workspace.commitQuickAdd();
      workspace.closeQuickAdd();
    } }, "Add to Today"))));
  }
};

// lib/ui/search.tsx
var Search = {
  onupdate({ state, dom }) {
    const results = dom.querySelector(".results");
    if (results && state.selected !== void 0 && results.children.length > 0) {
      results.children[state.selected].scrollIntoView({ block: "nearest" });
    }
  },
  view({ attrs: { workspace }, state }) {
    state.query = state.query === void 0 ? "" : state.query;
    let results = [];
    if (state.query) {
      results = workspace.backend.index.search(state.query).map((id) => {
        let node = workspace.nodes.find(id);
        if (!node) {
          return void 0;
        }
        if (node.getValue()) {
          node = node.getParent();
          if (!node.raw)
            return;
        }
        return node;
      }).filter((n) => n !== void 0);
    }
    const open = (node) => {
      workspace.open(node);
      state.query = "";
    };
    const onkeydown = (e) => {
      const mod = (a, b) => (a % b + b) % b;
      if (e.key === "ArrowDown") {
        if (state.selected === void 0) {
          state.selected = 0;
          return;
        }
        state.selected = mod(state.selected + 1, results.length);
        return false;
      }
      if (e.key === "ArrowUp") {
        if (state.selected === void 0) {
          state.selected = 0;
        }
        state.selected = mod(state.selected - 1, results.length);
        return false;
      }
      if (e.key === "Enter") {
        if (state.selected !== void 0) {
          open(results[state.selected]);
        }
        return false;
      }
      if (e.key === "Escape") {
        state.query = "";
      }
    };
    const autocomplete = (e) => {
      state.query = e.target.value;
      state.selected = 0;
    };
    return /* @__PURE__ */ m("div", { class: "search", style: { position: "relative", display: "flex", flexGrow: "1", padding: "calc(var(--padding)/2)" } }, /* @__PURE__ */ m("div", { style: {
      width: "95%",
      padding: "calc(var(--padding)/2)",
      borderRadius: "0.25rem",
      border: results.length > 0 ? "1px solid var(--dark)" : "none",
      position: "absolute",
      zIndex: "100",
      background: results.length > 0 ? "white" : null
    } }, /* @__PURE__ */ m("input", { type: "text", placeholder: "Search", value: state.query, onkeydown, oninput: autocomplete, style: { width: "99%", border: "0", outline: "0", background: "transparent", marginRight: "var(--padding)" } }), results.length > 0 ? /* @__PURE__ */ m("div", { class: "results", style: {
      marginTop: "0.25rem",
      overflowX: "hidden",
      overflowY: "auto",
      maxHeight: "400px"
    } }, results.map((result, idx) => /* @__PURE__ */ m("div", { onclick: () => open(result), class: state.selected === idx ? "selected" : "" }, result.getName()))) : null));
  }
};

// lib/ui/notices.tsx
var FirstTimeMessage = {
  view({ attrs: { workspace } }) {
    return /* @__PURE__ */ m("div", null, /* @__PURE__ */ m("h3", { style: { margin: "0" } }, "Treehouse is under active development!"), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m("p", null, "This is a preview based on our main branch, it may have bugs. Please report them."), /* @__PURE__ */ m("p", null, "Data is stored using localstorage, which you can reset with Reset Demo in the", /* @__PURE__ */ m("svg", { xmlns: "http://www.w3.org/2000/svg", style: { display: "inline", marginLeft: "0.5rem", marginRight: "0.5rem" }, width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z" })), "menu in the top right."), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m("div", { style: { textAlign: "right" } }, /* @__PURE__ */ m("button", { style: { padding: "0.5rem", margin: "0.25rem", fontSize: "1.25rem" }, onclick: () => {
      localStorage.setItem("firsttime", "1");
      workspace.hideNotice();
    } }, "Got it")));
  }
};
var GitHubMessage = {
  view({ attrs: { workspace, finished } }) {
    return /* @__PURE__ */ m("div", null, /* @__PURE__ */ m("h3", { style: { margin: "0" } }, "Login with GitHub"), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m("p", null, "The GitHub backend is experimental so use at your own risk!"), /* @__PURE__ */ m("p", null, "To store your workspace we will create a public repository called ", /* @__PURE__ */ m("pre", { style: { display: "inline" } }, "<username>.treehouse.sh"), " if it doesn't already exist. You can manually make this repository private via GitHub if you want."), /* @__PURE__ */ m("p", null, "You can Logout via the", /* @__PURE__ */ m("svg", { xmlns: "http://www.w3.org/2000/svg", style: { display: "inline", marginLeft: "0.5rem", marginRight: "0.5rem" }, width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z" })), "menu in the top right to return to the localstorage backend."), /* @__PURE__ */ m("hr", null), /* @__PURE__ */ m("div", { style: { textAlign: "right" } }, /* @__PURE__ */ m("button", { style: { padding: "0.5rem", margin: "0.25rem", fontSize: "1.25rem" }, onclick: () => {
      workspace.hideNotice();
      localStorage.setItem("github", "1");
      finished();
    } }, "Login with GitHub"), /* @__PURE__ */ m("button", { style: { padding: "0.5rem", margin: "0.25rem", fontSize: "1.25rem" }, onclick: () => {
      workspace.hideNotice();
    } }, "Cancel")));
  }
};
var Notice = {
  view({ attrs: { workspace, message, finished } }) {
    return /* @__PURE__ */ m("div", { style: {
      position: "absolute",
      left: "0",
      right: "0",
      top: "0",
      bottom: "0"
    } }, /* @__PURE__ */ m("div", { onclick: () => workspace.hideNotice(), style: {
      position: "absolute",
      background: "black",
      opacity: "50%",
      width: "100%",
      height: "100%"
    } }), /* @__PURE__ */ m("div", { style: {
      position: "relative",
      marginLeft: "auto",
      marginRight: "auto",
      fontSize: "1.25rem",
      width: "680px",
      borderRadius: "0.5rem",
      filter: "drop-shadow(2px 2px 4px #5555)",
      marginTop: "20vh",
      padding: "2rem",
      background: "white"
    } }, m({
      "firsttime": FirstTimeMessage,
      "github": GitHubMessage
    }[message], { workspace, finished })));
  }
};

// lib/ui/app.tsx
var App = {
  view({ attrs: { workspace }, state }) {
    state.open = state.open === void 0 ? true : state.open;
    const toggle = (e) => {
      if (state.open) {
        state.open = false;
      } else {
        state.open = true;
      }
    };
    return /* @__PURE__ */ m("main", { style: { margin: "0", display: "flex", flexDirection: "column", position: "absolute", top: "0", bottom: "0", left: "0", right: "0" } }, /* @__PURE__ */ m("div", { style: { display: "flex", borderBottom: "1px solid var(--dark)" } }, state.open && /* @__PURE__ */ m("div", { style: { width: "200px", display: "flex", padding: "var(--padding)" } }, /* @__PURE__ */ m("div", { style: { flexGrow: "1" } }, /* @__PURE__ */ m("img", { src: "/icon_transparent.png", style: { opacity: "70%", width: "16px", height: "16px" } })), /* @__PURE__ */ m("svg", { onclick: toggle, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", class: "bi bi-layout-sidebar", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H5zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2V2z" }))), /* @__PURE__ */ m("div", { style: { flexGrow: "1", display: "flex" } }, !state.open && /* @__PURE__ */ m("svg", { onclick: toggle, style: { padding: "var(--padding)", borderLeft: "1px solid var(--dark)" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", class: "bi bi-layout-sidebar", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H5zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2V2z" })), /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid var(--dark)" } }), /* @__PURE__ */ m("div", { onclick: () => workspace.openToday(), style: { cursor: "pointer", padding: "var(--padding)", display: "flex", alignItems: "center" } }, /* @__PURE__ */ m("svg", { style: { marginRight: "0.25rem", height: "1rem", width: "1rem" }, xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z" }), /* @__PURE__ */ m("path", { d: "M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V4z" }), /* @__PURE__ */ m("text", { "text-anchor": "middle", x: "8", y: "13", style: { fontSize: "0.55rem" } }, new Date().getDate())), /* @__PURE__ */ m("div", null, "Today")), /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid var(--dark)" } }), /* @__PURE__ */ m("div", { onclick: () => workspace.openQuickAdd(), style: { cursor: "pointer", padding: "var(--padding)", display: "flex", alignItems: "center" } }, /* @__PURE__ */ m("svg", { style: { marginRight: "0.25rem", height: "1rem", width: "1rem" }, xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09zM4.157 8.5H7a.5.5 0 0 1 .478.647L6.11 13.59l5.732-6.09H9a.5.5 0 0 1-.478-.647L9.89 2.41 4.157 8.5z" })), /* @__PURE__ */ m("div", null, "Quick Add")), /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid var(--dark)" } }), /* @__PURE__ */ m(Search, { workspace }), /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid var(--dark)" } }), /* @__PURE__ */ m("div", { style: { padding: "var(--padding)" } }, /* @__PURE__ */ m("svg", { onclick: (e) => workspace.showMenu(e), "data-menu": "settings", "data-align": "right", style: { cursor: "pointer" }, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", fill: "currentColor", viewBox: "0 0 16 16" }, /* @__PURE__ */ m("path", { d: "M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z" }))))), /* @__PURE__ */ m("div", { style: { display: "flex", flexGrow: "1" } }, state.open && /* @__PURE__ */ m("div", { style: { width: "200px", padding: "var(--padding)" } }, workspace.nodes.getRoot().getChildren().map((node) => /* @__PURE__ */ m(NavNode, { node, expanded: true, level: 0, workspace }))), /* @__PURE__ */ m("div", { style: { flexGrow: "1", borderLeft: "1px solid var(--dark)" } }, workspace.panels.map((row) => /* @__PURE__ */ m("div", { style: { display: "flex" } }, row.map((panel) => /* @__PURE__ */ m(Panel2, { workspace, panel })))))), workspace.menu && /* @__PURE__ */ m(Menu, { workspace, ...workspace.menu }), workspace.palette && /* @__PURE__ */ m(CommandPalette, { workspace, ...workspace.palette }), workspace.quickadd && /* @__PURE__ */ m(QuickAdd, { workspace }), workspace.notice && /* @__PURE__ */ m(Notice, { workspace, ...workspace.notice }));
  }
};
var NavNode = {
  view({ attrs: { node, workspace, expanded, level }, state }) {
    state.expanded = state.expanded === void 0 ? expanded : state.expanded;
    const expandable = node.childCount() > 0 && level < 2;
    const toggle = (e) => {
      if (!expandable)
        return;
      if (state.expanded) {
        state.expanded = false;
      } else {
        state.expanded = true;
      }
      e.stopPropagation();
    };
    const open = (e) => {
      workspace.open(node);
    };
    return /* @__PURE__ */ m("div", null, /* @__PURE__ */ m("div", { style: { display: "flex", paddingBottom: "0.125rem", paddingTop: "0.125rem" } }, /* @__PURE__ */ m("svg", { onclick: toggle, style: { cursor: "pointer", flexShrink: "0", width: "1rem", height: "1rem", marginRight: "0.25rem", paddingLeft: "1px" }, xmlns: "http://www.w3.org/2000/svg", fill: "gray", viewBox: "0 0 16 16" }, expandable ? state.expanded ? /* @__PURE__ */ m("path", { d: "M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z" }) : /* @__PURE__ */ m("path", { d: "M6 12.796V3.204L11.481 8 6 12.796zm.659.753 5.48-4.796a1 1 0 0 0 0-1.506L6.66 2.451C6.011 1.885 5 2.345 5 3.204v9.592a1 1 0 0 0 1.659.753z" }) : null), /* @__PURE__ */ m("div", { onclick: open, style: { cursor: "pointer", lineHeight: "1.45", fontSize: "0.875rem", flexGrow: "1", maxWidth: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } }, node.getName())), state.expanded && /* @__PURE__ */ m("div", { style: { marginLeft: "0.5rem" } }, node.getChildren().filter((n) => n.getName() !== "").map((n) => /* @__PURE__ */ m(NavNode, { workspace, node: n, level: level + 1 }))));
  }
};

// lib/backend/browser.ts
var BrowserBackend = class {
  constructor() {
    this.auth = null;
    this.files = new FileStore();
    this.nodes = new NodeStore(this.files);
    if (window.MiniSearch) {
      this.index = new SearchIndex_MiniSearch();
    } else {
      this.index = new SearchIndex_Dumb();
    }
  }
};
var SearchIndex_MiniSearch = class {
  // MiniSearch
  constructor() {
    this.indexer = new MiniSearch({
      idField: "ID",
      fields: ["ID", "Name", "Value.markdown"],
      // fields to index for full-text search
      storeFields: ["ID"],
      // fields to return with search results
      extractField: (document2, fieldName) => {
        return fieldName.split(".").reduce((doc, key) => doc && doc[key], document2);
      }
    });
  }
  index(node) {
    if (this.indexer.has(node.ID)) {
      this.indexer.replace(node);
    } else {
      this.indexer.add(node);
    }
  }
  remove(id) {
    this.indexer.discard(id);
  }
  search(query) {
    const suggested = this.indexer.autoSuggest(query);
    if (suggested.length === 0)
      return [];
    return this.indexer.search(suggested[0].suggestion).map((doc) => doc.ID);
  }
};
var SearchIndex_Dumb = class {
  constructor() {
    this.nodes = {};
  }
  index(node) {
    this.nodes[node.ID] = node.Name;
  }
  remove(id) {
    delete this.nodes[id];
  }
  search(query) {
    const results = [];
    for (const id in this.nodes) {
      if (this.nodes[id].includes(query)) {
        results.push(id);
      }
    }
    return results;
  }
};
var NodeStore = class {
  constructor(files) {
    this.files = files;
  }
  async loadAll() {
    return JSON.parse(await this.files.readFile("workspace.json") || "[]");
  }
  async saveAll(nodes) {
    await this.files.writeFile("workspace.json", JSON.stringify(nodes));
  }
};
var FileStore = class {
  async readFile(path) {
    return localStorage.getItem(`treehouse:${path}`);
  }
  async writeFile(path, contents) {
    localStorage.setItem(`treehouse:${path}`, contents);
  }
};

// lib/backend/github.ts
var GitHubBackend = class {
  // path => sha
  constructor(loginURL, octokit) {
    this.loginURL = loginURL;
    this.clientFactory = octokit;
    this.auth = this;
    this.shas = {};
    const localbackend = new BrowserBackend();
    this.index = localbackend.index;
    this.nodes = localbackend.nodes;
    this.files = localbackend.files;
    this.writeDebounce = debounce((path, contents) => {
      console.log("Saving workspace...");
      this.writeFile(path, contents);
    });
  }
  get repo() {
    return `${this.user?.userID()}.treehouse.sh`;
  }
  async initialize() {
    const code = new URL(location.href).searchParams.get("code");
    if (code) {
      try {
        const querystring = location.search.replace(/\bcode=\w+/, "").replace(/\?$/, "");
        history.pushState({}, "", `${location.pathname}${querystring}`);
        const response = await fetch(this.loginURL, {
          method: "POST",
          mode: "cors",
          headers: { "content-type": "application/json" },
          body: JSON.stringify({ code })
        });
        const result = await response.json();
        if (result.error) {
          throw result.error;
        }
        localStorage.setItem("treehouse:gh-token", result.token);
      } catch (e) {
        this.reset();
        console.error(e);
        return;
      }
    }
    await this.authenticate();
    if (!this.user) {
      console.error("authentication failed");
      return;
    }
    try {
      await this.client.rest.repos.get({
        owner: this.user.userID(),
        repo: this.repo
      });
    } catch (e) {
      if (e.message !== "Not Found") {
        throw e;
      }
      console.log("Creating repository...");
      const resp = await this.client.rest.repos.createForAuthenticatedUser({ name: this.repo });
      if (resp.status !== 201) {
        console.error(resp);
        return;
      }
    }
    try {
      await this.client.rest.repos.getContent({
        owner: this.user.userID(),
        repo: this.repo,
        path: "workspace.json"
      });
    } catch (e) {
      if (e.name !== "HttpError") {
        throw e;
      }
      console.log("Creating workspace.json...");
      const resp = await this.client.rest.repos.createOrUpdateFileContents({
        owner: this.user.userID(),
        repo: this.repo,
        path: "workspace.json",
        message: "initial commit",
        content: btoa(JSON.stringify([]))
      });
      if (resp.status !== 201) {
        console.error(resp);
        return;
      }
    }
    this.files = this;
    this.nodes = this;
  }
  async authenticate() {
    const token = localStorage.getItem("treehouse:gh-token");
    if (!token) {
      return;
    }
    this.client = new this.clientFactory({ auth: token });
    const resp = await this.client.rest.users.getAuthenticated();
    if (!resp || resp.error) {
      return;
    }
    this.user = new User(resp.data);
    if (m)
      m.redraw();
  }
  currentUser() {
    return this.user;
  }
  login() {
    location.assign(this.loginURL);
  }
  reset() {
    localStorage.removeItem("treehouse:gh-token");
    this.user = null;
    if (m)
      m.redraw();
  }
  logout() {
    this.reset();
    location.reload();
  }
  async loadAll() {
    return JSON.parse(await this.readFile("workspace.json") || "[]");
  }
  async saveAll(nodes) {
    this.writeDebounce("workspace.json", JSON.stringify(nodes, null, 2));
  }
  async readFile(path) {
    try {
      const resp = await this.client.rest.repos.getContent({
        owner: this.user?.userID(),
        repo: this.repo,
        path,
        random: Math.random().toString(36).substring(2)
      });
      this.shas[path] = resp.data.sha;
      return atob(resp.data.content);
    } catch (e) {
      if (e.name !== "HttpError") {
        console.error(e);
      }
      return null;
    }
  }
  async writeFile(path, contents) {
    const resp = await this.client.rest.repos.createOrUpdateFileContents({
      owner: this.user?.userID(),
      repo: this.repo,
      path,
      message: "autosave",
      content: btoa(contents),
      sha: this.shas[path]
    });
    this.shas[path] = resp.data.content.sha;
  }
};
var User = class {
  // github user object
  constructor(user) {
    this.user = user;
  }
  userID() {
    return this.user.login;
  }
  displayName() {
    return this.user.name;
  }
  avatarURL() {
    return this.user.avatar_url;
  }
};
function debounce(func, timeout = 3e3) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
}

// lib/mod.ts
var Checkbox = class {
  constructor() {
    this.checked = false;
  }
};
Checkbox = __decorateClass([
  component
], Checkbox);
var Page = class {
  constructor() {
    this.markdown = "";
  }
};
Page = __decorateClass([
  component
], Page);
async function setup(document2, target, backend) {
  if (backend.initialize) {
    await backend.initialize();
  }
  const workspace = new Workspace(backend);
  window.workspace = workspace;
  await workspace.initialize();
  workspace.commands.registerCommand({
    id: "add-page",
    title: "Add page",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const page = new Page();
      ctx.node.addComponent(page);
    }
  });
  workspace.commands.registerCommand({
    id: "remove-page",
    title: "Remove page",
    action: (ctx) => {
      if (!ctx.node)
        return;
      ctx.node.removeComponent(Page);
    }
  });
  workspace.commands.registerCommand({
    id: "add-checkbox",
    title: "Add checkbox",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const checkbox = new Checkbox();
      ctx.node.addComponent(checkbox);
    }
  });
  workspace.commands.registerCommand({
    id: "remove-checkbox",
    title: "Remove checkbox",
    action: (ctx) => {
      if (!ctx.node)
        return;
      ctx.node.removeComponent(Checkbox);
    }
  });
  workspace.commands.registerCommand({
    id: "mark-done",
    title: "Mark done",
    action: (ctx) => {
      if (!ctx.node)
        return;
      if (ctx.node.hasComponent(Checkbox)) {
        const checkbox = ctx.node.getComponent(Checkbox);
        if (!checkbox.checked) {
          checkbox.checked = true;
          ctx.node.changed();
        } else {
          ctx.node.removeComponent(Checkbox);
        }
      } else {
        const checkbox = new Checkbox();
        ctx.node.addComponent(checkbox);
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "mark-done", key: "meta+enter" });
  workspace.commands.registerCommand({
    id: "expand",
    title: "Expand",
    action: (ctx) => {
      if (!ctx.node)
        return;
      workspace.setExpanded(ctx.node, true);
      m.redraw();
    }
  });
  workspace.keybindings.registerBinding({ command: "expand", key: "meta+arrowdown" });
  workspace.commands.registerCommand({
    id: "collapse",
    title: "Collapse",
    action: (ctx) => {
      if (!ctx.node)
        return;
      workspace.setExpanded(ctx.node, false);
      m.redraw();
    }
  });
  workspace.keybindings.registerBinding({ command: "collapse", key: "meta+arrowup" });
  workspace.commands.registerCommand({
    id: "indent",
    title: "Indent",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const prev = panelNode(ctx.node.getPrevSibling(), ctx.node.panel);
      if (prev !== null) {
        ctx.node.setParent(prev);
        workspace.setExpanded(prev, true);
        const node = ctx.node;
        m.redraw.sync();
        workspace.focus(node);
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "indent", key: "tab" });
  workspace.commands.registerCommand({
    id: "outdent",
    title: "Outdent",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const parent = panelNode(ctx.node.getParent(), ctx.node.panel);
      if (parent !== null && parent.ID !== "@root") {
        ctx.node.setParent(parent.getParent());
        ctx.node.setSiblingIndex(parent.getSiblingIndex() + 1);
        if (parent.childCount() === 0) {
          workspace.setExpanded(parent, false);
        }
        const node = ctx.node;
        m.redraw.sync();
        workspace.focus(node);
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "outdent", key: "shift+tab" });
  workspace.commands.registerCommand({
    id: "insert-child",
    title: "Insert Child",
    action: (ctx, name = "") => {
      if (!ctx.node)
        return;
      const node = workspace.nodes.new(name);
      node.setParent(ctx.node);
      if (ctx.node.panel) {
        workspace.setExpanded(ctx.node, true);
      }
      m.redraw.sync();
      workspace.focus(panelNode(node, ctx.node.panel), name.length);
    }
  });
  workspace.commands.registerCommand({
    id: "insert-before",
    title: "Insert Before",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const node = workspace.nodes.new("");
      node.setParent(ctx.node.getParent());
      node.setSiblingIndex(ctx.node.getSiblingIndex());
      m.redraw.sync();
      workspace.focus(panelNode(node, ctx.node.panel));
    }
  });
  workspace.commands.registerCommand({
    id: "insert",
    title: "Insert Node",
    action: (ctx, name = "") => {
      if (!ctx.node)
        return;
      const node = workspace.nodes.new(name);
      node.setParent(ctx.node.getParent());
      node.setSiblingIndex(ctx.node.getSiblingIndex() + 1);
      m.redraw.sync();
      workspace.focus(panelNode(node, ctx.node.panel));
    }
  });
  workspace.keybindings.registerBinding({ command: "insert", key: "shift+enter" });
  workspace.commands.registerCommand({
    id: "delete",
    title: "Delete node",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const prev = ctx.node.getPrevSibling();
      ctx.node.destroy();
      m.redraw.sync();
      if (prev) {
        let pos = 0;
        if (ctx.event && ctx.event.key === "Backspace") {
          pos = prev.getName().length;
        }
        workspace.focus(panelNode(prev, ctx.node.panel), pos);
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "delete", key: "shift+meta+backspace" });
  workspace.commands.registerCommand({
    id: "prev",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const above = workspace.findAbove(ctx.node);
      if (above) {
        workspace.focus(panelNode(above, ctx.node.panel));
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "prev", key: "arrowup" });
  workspace.commands.registerCommand({
    id: "next",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const below = workspace.findBelow(ctx.node);
      if (below) {
        workspace.focus(panelNode(below, ctx.node.panel));
      }
    }
  });
  workspace.keybindings.registerBinding({ command: "next", key: "arrowdown" });
  workspace.commands.registerCommand({
    id: "pick-command",
    action: (ctx) => {
      if (!ctx.node)
        return;
      const trigger = workspace.getInput(ctx.node);
      const rect = trigger.getBoundingClientRect();
      const x = document2.body.scrollLeft + rect.x + trigger.selectionStart * 10 + 20;
      const y = document2.body.scrollTop + rect.y - 8;
      workspace.showPalette(x, y, workspace.newContext({ node: ctx.node }));
    }
  });
  workspace.keybindings.registerBinding({ command: "pick-command", key: "meta+k" });
  workspace.commands.registerCommand({
    id: "new-panel",
    title: "Open in New Panel",
    action: (ctx) => {
      if (!ctx.node)
        return;
      workspace.openNewPanel(ctx.node);
      m.redraw();
    }
  });
  workspace.commands.registerCommand({
    id: "close-panel",
    title: "Close Panel",
    action: (ctx, panel) => {
      workspace.closePanel(panel || ctx.node.panel);
      m.redraw();
    }
  });
  workspace.commands.registerCommand({
    id: "zoom",
    title: "Open",
    action: (ctx) => {
      ctx.node.panel.history.push(ctx.node);
      m.redraw();
    }
  });
  workspace.commands.registerCommand({
    id: "generate-random",
    title: "Generate Random Children",
    action: (ctx) => {
      if (!ctx.node)
        return;
      [...Array(100)].forEach(() => {
        const node = workspace.nodes.new(generateName(8));
        node.setParent(ctx.node);
      });
    }
  });
  workspace.menus.registerMenu("node", [
    { command: "zoom" },
    { command: "new-panel" },
    { command: "indent" },
    { command: "outdent" },
    { command: "delete" },
    { command: "add-checkbox" },
    // example when condition
    { command: "remove-checkbox" },
    { command: "mark-done" },
    { command: "add-page" },
    { command: "remove-page" },
    { command: "generate-random" }
  ]);
  workspace.menus.registerMenu("settings", [
    { title: () => `${workspace.backend.auth?.currentUser()?.userID()} @ GitHub`, disabled: true, when: () => workspace.authenticated() },
    { title: () => "Login with GitHub", when: () => !workspace.authenticated(), onclick: () => {
      if (!localStorage.getItem("github")) {
        workspace.showNotice("github", () => {
          workspace.backend.auth.login();
        });
      } else {
        workspace.backend.auth.login();
      }
    } },
    { title: () => "Reset Demo", when: () => !workspace.authenticated(), onclick: () => {
      localStorage.clear();
      location.reload();
    } },
    { title: () => "Submit Issue", onclick: () => window.open("https://github.com/treehousedev/treehouse/issues", "_blank") },
    { title: () => "Logout", when: () => workspace.authenticated(), onclick: () => workspace.backend.auth.logout() }
  ]);
  document2.addEventListener("keydown", (e) => {
    const binding = workspace.keybindings.evaluateEvent(e);
    if (binding && workspace.context.node) {
      workspace.commands.executeCommand(binding.command, workspace.context);
      e.stopPropagation();
      e.preventDefault();
    }
  });
  document2.addEventListener("click", (e) => {
    workspace.hideMenu();
  });
  m.mount(target, { view: () => m(App, { workspace }) });
}
function generateName(length = 10) {
  const random = (min, max) => {
    return Math.round(Math.random() * (max - min) + min);
  };
  const word = () => {
    const words2 = [
      "got",
      "ability",
      "shop",
      "recall",
      "fruit",
      "easy",
      "dirty",
      "giant",
      "shaking",
      "ground",
      "weather",
      "lesson",
      "almost",
      "square",
      "forward",
      "bend",
      "cold",
      "broken",
      "distant",
      "adjective"
    ];
    return words2[random(0, words2.length - 1)];
  };
  const words = (length2) => [...Array(length2)].map((_, i) => word()).join(" ").trim();
  return words(random(2, length));
}
export {
  BrowserBackend,
  Checkbox,
  GitHubBackend,
  Page,
  SearchIndex_MiniSearch,
  setup
};
